
@article{noauthor_purevariants_nodate,
	title = {pure::variants User's Guide},
	pages = {238},
	langid = {english},
	file = {purevariants User's Guide.pdf:C\:\\Users\\perde\\Zotero\\storage\\5T497PDS\\purevariants User's Guide.pdf:application/pdf},
}

@inproceedings{voelter_product_2007,
	location = {Kyoto, Japan},
	title = {Product Line Implementation using Aspect-Oriented and Model-Driven Software Development},
	isbn = {978-0-7695-2888-5},
	url = {http://ieeexplore.ieee.org/document/4339272/},
	doi = {10.1109/SPLINE.2007.23},
	abstract = {Software product line engineering aims to reduce development time, effort, cost, and complexity by taking advantage of the commonality within a portfolio of similar products. The effectiveness of a software product line approach directly depends on how well feature variability within the portfolio is implemented and managed throughout the development lifecycle, from early analysis through maintenance and evolution. This paper presents an approach that facilitates variability implementation, management and tracing by integrating model-driven and aspect-oriented software development. Features are separated in models and composed by aspect-oriented composition techniques on model level. Model transformations support the transition from problem to solution domain. Aspect-oriented techniques enable the explicit expression and modularization of variability on model, code, and template level. The presented concepts are illustrated with a case study of a home automation system.},
	eventtitle = {11th International Software Product Line Conference ({SPLC} 2007)},
	pages = {233--242},
	booktitle = {11th International Software Product Line Conference ({SPLC} 2007)},
	publisher = {{IEEE}},
	author = {Voelter, Markus and Groher, Iris},
	urldate = {2021-09-30},
	date = {2007-09},
	year = {2007},
	langid = {english},
	file = {Voelter a Groher - 2007 - Product Line Implementation using Aspect-Oriented .pdf:C\:\\Users\\perde\\Zotero\\storage\\W6TK4NG8\\Voelter a Groher - 2007 - Product Line Implementation using Aspect-Oriented .pdf:application/pdf},
}

@inproceedings{kohut_guidelines_2010,
	location = {Herlany},
	title = {Guidelines for using aspects in product lines},
	isbn = {978-1-4244-6422-7 978-1-4244-6424-1},
	url = {http://ieeexplore.ieee.org/document/5423741/},
	doi = {10.1109/SAMI.2010.5423741},
	abstract = {Software product lines are a successful approach to software reuse. To a signiﬁcant extent, the development of product lines is complicated by crosscutting concerns. This is especially true for product line conﬁguration. Aspect-oriented programming can often help to develop product lines more effectively, but this is not always so. This paper shows it is possible to sublimate the expert knowledge about using aspectoriented programming in product line development in the form of independently applicable guidelines by proposing an approach to expressing such guidelines. A complete guideline entitled Implementing Mandatory Features with no Crosscutting Concerns is presented as an example. The guidelines have been evaluated in a product line case study that conﬁrmed their applicability. The results of this study obtained by the application of a number of metrics are provided and discussed in the paper.},
	eventtitle = {2010 {IEEE} 8th International Symposium on Applied Machine Intelligence and Informatics ({SAMI} 2010)},
	pages = {183--188},
	booktitle = {2010 {IEEE} 8th International Symposium on Applied Machine Intelligence and Informatics ({SAMI})},
	publisher = {{IEEE}},
	author = {Kohut, Jan and Vranic, Valentino},
	urldate = {2021-09-30},
	date = {2010-01},
	year = {2010},
	langid = {english},
	file = {Kohut a Vranic - 2010 - Guidelines for using aspects in product lines.pdf:C\:\\Users\\perde\\Zotero\\storage\\CMXATLHR\\Kohut a Vranic - 2010 - Guidelines for using aspects in product lines.pdf:application/pdf},
}

@article{botterweck_automating_2009,
	title = {Automating Product Derivation in Software Product Line Engineering},
	abstract = {This paper deals with deriving software products from a software product line ({SPL}) in an efﬁcient and automated way. We present an approach that (1) represents the {SPL} with a set of integrated models, (2) speciﬁes variability and conﬁguration options for possible product variants and (3) automatically derives executable products with model transformations and aspect-oriented techniques. The approach is discussed with a sample {SPL} of scientiﬁc calculators.},
	pages = {6},
	author = {Botterweck, Goetz and Lee, Kwanwoo and Thiel, Steffen},
	date = {2009},
	year = {2009},
	langid = {english},
	file = {Botterweck et al. - Automating Product Derivation in Software Product .pdf:C\:\\Users\\perde\\Zotero\\storage\\4J89E3DM\\Botterweck et al. - Automating Product Derivation in Software Product .pdf:application/pdf},
}

@inproceedings{lee_feature-modeling_2009,
	location = {Daegu, Korea},
	title = {Feature-Modeling and Aspect-Oriented Programming: Integration and Automation},
	isbn = {978-0-7695-3642-2},
	url = {http://ieeexplore.ieee.org/document/5286670/},
	doi = {10.1109/SNPD.2009.77},
	shorttitle = {Feature-Modeling and Aspect-Oriented Programming},
	abstract = {Feature modeling is an essential activity for modeling and managing the variability of a software product line. On the other hand, aspect-oriented programming provides effective means for modularizing feature implementation. Although current {AOP} tools (e.g., {AJDT}) provide a mechanism for switching aspect modules on and off to conﬁgure a product, this becomes infeasible in the context of large-scale product lines with thousands of variations. In this paper, we describe how feature modeling can be integrated with aspect-oriented programming to perform automated product derivation efﬁciently and effectively in the context of large-scale product lines.},
	eventtitle = {2009 10th {ACIS} International Conference on Software Engineering, Artificial Intelligences, Networking and Parallel/Distributed Computing},
	pages = {186--191},
	booktitle = {2009 10th {ACIS} International Conference on Software Engineering, Artificial Intelligences, Networking and Parallel/Distributed Computing},
	publisher = {{IEEE}},
	author = {Lee, Kwanwoo and Botterweck, Goetz and Thiel, Steffen},
	urldate = {2021-09-30},
	date = {2009},
	year = {2009},
	langid = {english},
	file = {Lee et al. - 2009 - Feature-Modeling and Aspect-Oriented Programming .pdf:C\:\\Users\\perde\\Zotero\\storage\\T322SEFV\\Lee et al. - 2009 - Feature-Modeling and Aspect-Oriented Programming .pdf:application/pdf},
}

@article{thum_featureide_nodate,
	title = {{FeatureIDE}: Overview},
	pages = {58},
	author = {Thüm, Thomas and Meinicke, Jens},
	langid = {english},
	file = {Thüm a Meinicke - FeatureIDE Overview.pdf:C\:\\Users\\perde\\Zotero\\storage\\AKM922AH\\Thüm a Meinicke - FeatureIDE Overview.pdf:application/pdf},
}

@collection{reinhartz-berger_domain1_2013,
	location = {Berlin, Heidelberg},
	title = {Domain Engineering},
	isbn = {978-3-642-36653-6 978-3-642-36654-3},
	url = {http://link.springer.com/10.1007/978-3-642-36654-3},
	publisher = {Springer Berlin Heidelberg},
	editor = {Reinhartz-Berger, Iris and Sturm, Arnon and Clark, Tony and Cohen, Sholom and Bettin, Jorn},
	urldate = {2021-09-30},
	date = {2013},
	year = {2013},
	langid = {english},
	doi = {10.1007/978-3-642-36654-3},
	file = {Reinhartz-Berger et al. - 2013 - Domain Engineering.pdf:C\:\\Users\\perde\\Zotero\\storage\\72UGUPQT\\Reinhartz-Berger et al. - 2013 - Domain Engineering.pdf:application/pdf},
}

@book{reinhartz-berger_domain_2013,
  editor    = {Iris Reinhartz{-}Berger and
               Arnon Sturm and
               Tony Clark and
               Sholom Cohen and
               Jorn Bettin},
  title     = {Domain Engineering, Product Lines, Languages, and Conceptual Models},
  publisher = {Springer},
  year      = {2013},
  url       = {https://doi.org/10.1007/978-3-642-36654-3},
  doi       = {10.1007/978-3-642-36654-3},
  isbn      = {978-3-642-36653-6},
  timestamp = {Tue, 03 Nov 2020 08:17:14 +0100},
  biburl    = {https://dblp.org/rec/books/daglib/0032299.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{bodden_racer_2008,
	location = {Seattle, {WA}, {USA}},
	title = {Racer: effective race detection using aspectj},
	isbn = {978-1-60558-050-0},
	url = {http://portal.acm.org/citation.cfm?doid=1390630.1390650},
	doi = {10.1145/1390630.1390650},
	shorttitle = {Racer},
	abstract = {Programming errors occur frequently in large software systems, and even more so if these systems are concurrent. In the past researchers have developed specialized programs to aid programmers detecting concurrent programming errors such as deadlocks, livelocks, starvation and data races.},
	eventtitle = {the 2008 international symposium},
	pages = {155},
	booktitle = {Proceedings of the 2008 international symposium on Software testing and analysis - {ISSTA} '08},
	publisher = {{ACM} Press},
	author = {Bodden, Eric and Havelund, Klaus},
	urldate = {2021-09-30},
	date = {2008},
	year = {2008},
	langid = {english},
	file = {Bodden a Havelund - 2008 - Racer effective race detection using aspectj.pdf:C\:\\Users\\perde\\Zotero\\storage\\YBDR9IGW\\Bodden a Havelund - 2008 - Racer effective race detection using aspectj.pdf:application/pdf},
}

@inproceedings{kastner_case_2007,
	location = {Kyoto, Japan},
	title = {A Case Study Implementing Features Using {AspectJ}},
	isbn = {978-0-7695-2888-5},
	url = {http://ieeexplore.ieee.org/document/4339271/},
	doi = {10.1109/SPLINE.2007.12},
	abstract = {Software product lines aim to create highly conﬁgurable programs from a set of features. Common belief and recent studies suggest that aspects are well-suited for implementing features. We evaluate the suitability of {AspectJ} with respect to this task by a case study that refactors the embedded database system Berkeley {DB} into 38 features. Contrary to our initial expectations, the results were not encouraging. As the number of aspects in a feature grows, there is a noticeable decrease in code readability and maintainability. Most of the unique and powerful features of {AspectJ} were not needed. We document where {AspectJ} is unsuitable for implementing features of refactored legacy applications and explain why.},
	eventtitle = {11th International Software Product Line Conference ({SPLC} 2007)},
	pages = {223--232},
	booktitle = {11th International Software Product Line Conference ({SPLC} 2007)},
	publisher = {{IEEE}},
	author = {Kastner, Christian and Apel, Sven and Batory, Don},
	urldate = {2021-09-30},
	date = {2007-09},
	year = {2007},
	langid = {english},
	file = {Kastner et al. - 2007 - A Case Study Implementing Features Using AspectJ.pdf:C\:\\Users\\perde\\Zotero\\storage\\IXS33R5P\\Kastner et al. - 2007 - A Case Study Implementing Features Using AspectJ.pdf:application/pdf},
}

@inproceedings{figueiredo_evolving_2008,
	author = {Figueiredo, Eduardo and Cacho, Nélio and Sant'Anna, Claudio and Monteiro, Mario and Kulesza, Uirá and Garcia, Alessandro and Soares, Sergio and Ferrari, Fabiano and Khan, Safoora and Castor, Fernando and Dantas, Francisco},
	year = {2008},
	month = {01},
	pages = {261-270},
	title = {Evolving software product lines with aspects: An empirical study on design stability},
	journal = {Proceedings - International Conference on Software Engineering},
	doi = {10.1145/1368088.1368124}
}


@article{young_using_1999,
	title = {Using {AspectJ} to Build a Software Product Line for Mobile Devices},
	pages = {73},
	author = {Young, Trevor J and Math, B},
	date = {1999},
	year = {1999},
	langid = {english},
	file = {Young a Math - Using AspectJ to Build a Software Product Line for.pdf:C\:\\Users\\perde\\Zotero\\storage\\RDLYLGQP\\Young a Math - Using AspectJ to Build a Software Product Line for.pdf:application/pdf},
}

@article{beuche_software_2006,
	title = {Software Product Line Engineering with Feature Models},
	pages = {7},
	author = {Beuche, Danilo and Dalgarno, Mark},
	date = {2006},
	year = {2006},
	langid = {english},
	file = {Beuche a Dalgarno - Software Product Line Engineering with Feature Mod.pdf:C\:\\Users\\perde\\Zotero\\storage\\RQ3JG6HY\\Beuche a Dalgarno - Software Product Line Engineering with Feature Mod.pdf:application/pdf},
}

@article{pearce_profiling_2007,
	title = {Profiling with {AspectJ}},
	volume = {37},
	issn = {00380644, 1097024X},
	url = {https://onlinelibrary.wiley.com/doi/10.1002/spe.788},
	doi = {10.1002/spe.788},
	abstract = {This paper investigates whether {AspectJ} can be used for efﬁcient proﬁling of Java programs. Proﬁling differs from other applications of {AOP} (e.g. tracing), since it necessitates efﬁcient and often complex interactions with the target program. As such, it was uncertain whether {AspectJ} could achieve this goal. Therefore, we investigate four common proﬁling problems (heap usage, object lifetime, wasted time and time-spent) and report on how well {AspectJ} handles them. For each, we provide an efﬁcient implementation, discuss any trade-offs or limitations and present the results of an experimental evaluation into the costs of using it. Our conclusions are mixed. On the one hand, we ﬁnd that {AspectJ} is sufﬁciently expressive to describe the four proﬁling problems and reasonably efﬁcient in most cases. On the other hand, we ﬁnd several limitations with the current {AspectJ} implementation that severely hamper its suitability for proﬁling. Copyright c 2006 John Wiley \& Sons, Ltd.},
	pages = {747--777},
	number = {7},
	journaltitle = {Software: Practice and Experience},
	shortjournal = {Softw: Pract. Exper.},
	author = {Pearce, David J. and Webster, Matthew and Berry, Robert and Kelly, Paul H. J.},
	urldate = {2021-09-30},
	date = {2007-06},
	year = {2007-06},
	langid = {english},
	file = {Pearce et al. - 2007 - Profiling with AspectJ.pdf:C\:\\Users\\perde\\Zotero\\storage\\IZRTMSA3\\Pearce et al. - 2007 - Profiling with AspectJ.pdf:application/pdf},
}

@book{wagner_software_2013,
	location = {Berlin, Heidelberg},
	title = {Software Product Quality Control},
	isbn = {978-3-642-38570-4 978-3-642-38571-1},
	url = {http://link.springer.com/10.1007/978-3-642-38571-1},
	publisher = {Springer Berlin Heidelberg},
	author = {Wagner, Stefan},
	urldate = {2021-09-30},
	date = {2013},
	year = {2013},
	langid = {english},
	doi = {10.1007/978-3-642-38571-1},
	file = {Wagner - 2013 - Software Product Quality Control.pdf:C\:\\Users\\perde\\Zotero\\storage\\CEII5J2D\\Wagner - 2013 - Software Product Quality Control.pdf:application/pdf},
}

@book{laddad_aspectj_2003,
	location = {Greenwich, {CT}},
	title = {{AspectJ} in action: practical aspect-oriented programming},
	isbn = {978-1-930110-93-9},
	shorttitle = {{AspectJ} in action},
	pagetotal = {481},
	publisher = {Manning},
	author = {Laddad, Ramnivas},
	date = {2003},
	year = {2003},
	langid = {english},
	note = {{OCLC}: ocm53049913},
	keywords = {Java (Computer program language), Object-oriented programming (Computer science), Web site development},
	file = {Laddad - 2003 - AspectJ in action practical aspect-oriented progr.pdf:C\:\\Users\\perde\\Zotero\\storage\\7YVYZ8LL\\Laddad - 2003 - AspectJ in action practical aspect-oriented progr.pdf:application/pdf},
}

@book{pelanek_programatorska_2012,
	location = {Brno},
	edition = {1. vydání},
	title = {Programátorská cvičebnice},
	isbn = {978-80-251-3751-2},
	pagetotal = {176},
	publisher = {Computer press},
	author = {Pelánek, Radek},
	date = {2012},
	year = {2012},
}

@article{vranic_features_2016,
	title = {Features as transformations: A generative approach to software development},
	volume = {13},
	issn = {1820-0214, 2406-1018},
	url = {http://www.doiserbia.nb.rs/Article.aspx?ID=1820-02141600027V},
	doi = {10.2298/CSIS160128027V},
	shorttitle = {Features as transformations},
	abstract = {The objective of feature modeling is to foster software reuse by enabling to explicitly and abstractly express commonality and variability in the domain. Feature modeling is used to conﬁgure other models and, eventually, code. These software assets are being conﬁgured by the feature model based on the selection of variable features. However, selecting a feature is far from a naive component based approach where feature inclusion would simply mean including the corresponding component. More often than not, feature inclusion affects several places in models or code to be conﬁgured requiring their nontrivial adaptation. Thus, feature inclusion recalls transformation and this is at heart of the approach to feature model driven generation of software artifacts proposed in this paper. Features are viewed as transformations that may be executed during the generative process conducted by the feature model conﬁguration. The generative process is distributed in respective transformations enabling the developers to have a better control over it. This approach can be applied to modularize changes in product customization and to establish generative software product lines by gradual refactoring of existing products.},
	pages = {759--778},
	number = {3},
	journaltitle = {Computer Science and Information Systems},
	shortjournal = {{ComSIS}},
	author = {Vranic, Valentino and Táborský, Roman},
	urldate = {2021-10-30},
	date = {2016},
	year = {2016},
	langid = {english},
	file = {Vranic a Táborský - 2016 - Features as transformations A generative approach.pdf:C\:\\Users\\perde\\Zotero\\storage\\M3IGPR4S\\Vranic a Táborský - 2016 - Features as transformations A generative approach.pdf:application/pdf},
}

@inproceedings{EAOR_yokomori_2011,
	author = {Yokomori, Reishi and Siy, Harvey and Yoshida, Norihiro and Noro, Masami and Inoue, Katsuro},
	title = {Measuring the Effects of Aspect-Oriented Refactoring on Component Relationships: Two Case Studies},
	year = {2011},
	isbn = {9781450306058},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1960275.1960301},
	doi = {10.1145/1960275.1960301},
	abstract = {Aspect-oriented refactoring is a promising technique for improving modularity and reducing complexity of existing software systems through encapsulating crosscutting concerns. As complexity of a system is often linked to the degree to which its components are connected, we investigate in this paper the impact of such refactoring activities on component relationships. We analyze two aspect-refactoring projects to determine circumstances when such activities are effective at reducing component relationships and when they are not. We measure two kinds of relationships between components, use and clone relations. We compare how these metrics changed between the original and the refactored system. Our findings indicate that aspect-oriented refactoring is successful in improving the modularity and complexity of the base code. However, we obtain mixed results when aspects are accounted for. Based on these results, we also discuss constraints to the technology as well as other design considerations that may limit the effectiveness of aspect-oriented refactoring on actual systems.},
	booktitle = {Proceedings of the Tenth International Conference on Aspect-Oriented Software Development},
	pages = {215–226},
	numpages = {12},
	keywords = {aspect-oriented programming, code clone analysis, coupling, refactoring, use-relation analysis},
	location = {Porto de Galinhas, Brazil},
	series = {AOSD '11}
}

@article{hotdraw_deursen_2009,
	author = {Marin, Marius and Deursen, Arie and Moonen, Leon and Rijst, Robin},
	year = {2009},
	month = {06},
	pages = {323-356},
	title = {An integrated crosscutting concern migration strategy and its semi-automated application to JHotDraw},
	volume = {16},
	journal = {Autom. Softw. Eng.},
	doi = {10.1007/s10515-009-0051-2}
}



@article{batory_scaling_2004,
	title = {Scaling {Step}-{Wise} {Refinement}},
	volume = {30},
	abstract = {Step-wise refinement is a powerful paradigm for developing a complex program from a simple program by adding features incrementally. We present the AHEAD (Algebraic Hierarchical Equations for Application Design) model that shows how step-wise refinement scales to synthesize multiple programs and multiple noncode representations. AHEAD shows that software can have an elegant, hierarchical mathematical structure that is expressible as nested sets of equations. We review a tool set that supports AHEAD. As a demonstration of its viability, we have bootstrapped AHEAD tools from equational specifications, refining Java and nonJava artifacts automatically; a task that was accomplished only by ad hoc means previously.},
	language = {en},
	number = {6},
	journal = {IEEE TRANSACTIONS ON SOFTWARE ENGINEERING},
	author = {Batory, Don and Sarvela, Jacob Neal and Rauschmayer, Axel},
	year = {2004},
	pages = {17},
	file = {Batory et al. - 2004 - Scaling Step-Wise Refinement.pdf:C\:\\Users\\perde\\Zotero\\storage\\EFQGUL4Z\\Batory et al. - 2004 - Scaling Step-Wise Refinement.pdf:application/pdf},
}

@incollection{goos_overview_2001,
	address = {Berlin, Heidelberg},
	title = {An {Overview} of {AspectJ}},
	volume = {2072},
	isbn = {978-3-540-42206-8 978-3-540-45337-6},
	url = {http://link.springer.com/10.1007/3-540-45337-7_18},
	abstract = {AspectJ™ is a simple and practical aspect-oriented extension to Java™. With just a few new constructs, AspectJ provides support for modular implementation of a range of crosscutting concerns. In AspectJ’s dynamic join point model, join points are well-defined points in the execution of the program; pointcuts are collections of join points; advice are special method-like constructs that can be attached to pointcuts; and aspects are modular units of crosscutting implementation, comprising pointcuts, advice, and ordinary Java member declarations. AspectJ code is compiled into standard Java bytecode. Simple extensions to existing Java development environments make it possible to browse the crosscutting structure of aspects in the same kind of way as one browses the inheritance structure of classes. Several examples show that AspectJ is powerful, and that programs written using it are easy to understand.},
	language = {en},
	urldate = {2021-12-09},
	booktitle = {{ECOOP} 2001 — {Object}-{Oriented} {Programming}},
	publisher = {Springer Berlin Heidelberg},
	author = {Kiczales, Gregor and Hilsdale, Erik and Hugunin, Jim and Kersten, Mik and Palm, Jeffrey and Griswold, William G.},
	editor = {Goos, Gerhard and Hartmanis, Juris and van Leeuwen, Jan and Knudsen, Jørgen Lindskov},
	year = {2001},
	doi = {10.1007/3-540-45337-7_18},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {327--354},
	file = {Kiczales et al. - 2001 - An Overview of AspectJ.pdf:C\:\\Users\\perde\\Zotero\\storage\\C7GFF9U6\\Kiczales et al. - 2001 - An Overview of AspectJ.pdf:application/pdf},
}